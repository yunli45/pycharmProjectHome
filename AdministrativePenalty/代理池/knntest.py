from numpy import *  # 科学计算包
import operator   #  运算符模块,K-近邻算法执行排序操作的时候将使用这个模块提供的函数

"""
1.shape函数（求数组或者矩阵的维数）

# 基本应用就是返回矩阵的行数与列数
# shape[0]，shape[1],分别返回值为矩阵的行数与矩阵的列数
"""
# 3x3矩阵
e   = array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
print(e.shape  ) # (3, 3)
# 一维矩阵
b =array([1,2,3,4])
print(b.shape )  #(4,)
c = array([[1,1],[1,2],[1,3],[1,4]])
"""
c 实际的排列如下：
[[1 1]
 [1 2]
 [1 3]
 [1 4]]
"""
print( c.shape) #(4, 2)
print(c.shape[0]) # 4
print(c.shape[1])# 2

"""
2.tile函数(可以理解为numpy中的一个复制数组的函数）
titl(a,rep)
将a的复制n次，如果rep为一个元组（x,y），将a的扩展为：a的维数*x，a的没个维数中元素重复y遍

"""
# 这个例子中，将数组重复两次生成一个新的数组，数组的维数保持不变
a=[0,1,2]
b = tile(a,2)
print(b)
#这个例子中，a为二维数组，通过tile(a,2)生成的新数组，将数组a中每个维中的数据重复2次，生成一个维数不变，但数据量变为2倍的新数组
a=([0,1,2],[2,3,4])
b1 = tile(a,2)
print(b1)
"""
[[0, 1, 2, 0, 1, 2],
[2, 3, 4, 2, 3, 4]]
"""

# 本例中，a为1维数组，tile(a,(2,3))将a数组扩展为2倍维度数组（若a为2维的，则输出为4维的），每个维度中将a重复3次
a = [0,1,2]
print(tile(a,(2,3)))
"""
[[0, 1, 2, 0, 1, 2, 0, 1, 2],
[0, 1, 2, 0, 1, 2, 0, 1, 2]]

"""


"""
3.sum函数（求数组的和）
"""

print(a=np.sum([[0,1,2],[2,1,3]])  ) # 9  求数组的和
print(a=np.sum([[0,1,2],[2,1,3]],axis=0)  ) # [2, 2, 5]  按列求和
print(a=np.sum([[0,1,2],[2,1,3]],axis=1)  ) # [3, 6]  按行求和
print(sum([0,1,2],3)  ) # 6  将数组求和后，再加3


